//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub password_hash: String,
    #[sea_orm(unique)]
    pub wechat_openid: Option<String>,
    #[sea_orm(unique)]
    pub wechat_unionid: Option<String>,
    pub wechat_nickname: Option<String>,
    #[sea_orm(unique)]
    pub phone: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub wechat_avatar_url: Option<String>,
    pub school_id: Option<i32>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::schools::Entity",
        from = "Column::SchoolId",
        to = "super::schools::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Schools,
    #[sea_orm(has_many = "super::teacher_classes::Entity")]
    TeacherClasses,
    #[sea_orm(has_many = "super::user_roles::Entity")]
    UserRoles,
}

impl Related<super::schools::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Schools.def()
    }
}

impl Related<super::teacher_classes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeacherClasses.def()
    }
}

impl Related<super::user_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRoles.def()
    }
}

impl Related<super::classes::Entity> for Entity {
    fn to() -> RelationDef {
        super::teacher_classes::Relation::Classes.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::teacher_classes::Relation::Users.def().rev())
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_roles::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_roles::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
